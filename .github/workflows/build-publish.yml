name: build-publish-scan
#on:
#    push:
#        branches:
#         main
on: 
  workflow_dispatch:
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
jobs:
    build-publish-python:
        runs-on: ubuntu-latest              
        env:
          DOCKER_REPO: 'nd-dev-docker'
          IMAGE_NAME: 'my-very-cool-image:${{ github.run_number }}'
          JF_URL: https://${{ vars.JF_URL }}/
          DOCKER_CLI_EXPERIMENTAL: enabled
          CI: true
          JFROG_CLI_REPORT_USAGE: true
        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

            - name: Run JFrog CLI Ping
              run: jf rt ping
              
            - name: Checkout the repository
              uses: actions/checkout@v4

            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                jf pip-config --repo-resolve=oidctest-pypi

            - name: configure environment
              run: |    
                pip install --upgrade pip     
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV

            - name: build project
              run: |                                   
                jf pip install -r requirements.txt  --module=jfrog-python-example  --build-name python-frogbot --build-number 1            
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: publish python package
              run: |
                jf rt u dist/ oidctest-pypi/example-projects/ --module=jfrog-python-example --build-name python-frogbot --build-number 1

            - name: python curation
              run: |
                rm -f Pipfile 
                jf pip-config --repo-resolve=oidctest-pypi
                jf audit || true
                jf ca || true
                
            - name: publish build info
              run: |
                jf rt build-collect-env 
                jf rt build-add-dependencies .
                jf rt build-add-git
                jf rt build-publish

            - name: build scan
              run: |   
                echo $JFROG_CLI_COMMAND_SUMMARY_OUTPUT_DIR
                ls -ltra $JFROG_CLI_COMMAND_SUMMARY_OUTPUT_DIR
                jf build-scan --vuln --fail=false
                
            - name: Write to workflow job summary
              run: |
                    NOTE=$'>[!NOTE]\n>Frog Notes \n'
                    TIP=$'>[!TIP]\n>Hello JFrog\n'
                    IMPORTANT=$'>[!IMPORTANT]\n>Hello IMPORTANT NOTE:\n'
                    WARNING=$'>[!WARNING]\n>Hello WARNING NOTE\n'
                    CAUTION=$'>[!CAUTION]\n>Hello CAUTION NOTE\n'
                    echo "$NOTE" >> $GITHUB_STEP_SUMMARY
                    echo "$TIP" >> $GITHUB_STEP_SUMMARY
                    echo "$IMPORTANT" >> $GITHUB_STEP_SUMMARY
                    echo "$WARNING" >> $GITHUB_STEP_SUMMARY
                    echo "$CAUTION" >> $GITHUB_STEP_SUMMARY

